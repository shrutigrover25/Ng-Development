// // A regular expression is a character sequence defining a pattern search 

// // It can be a simple character as well as complicated pattern 

// // SYNTAX : 
// /pattern/modifiers

// //Example

// let patt=/NavGurukul/i


Regular Expression Modifiers

// used to perform multiline searches which can also be set to case insensitive matching

// g --> finding the character globally 
//i --> finding the character with in-sensitive matching 
// m --> multiline matching 

// Regular expression brackets can find characters in a specified range 

/*

[abc] --> find any of the characters inside the brackets 
[^abc] --> Find any character not inside the brackets 
[0-9] --> Find any digits between 0 to 9 
[^0-9] -> find any digit not inside the brackets 
[x|y] --> find any of the alternatives between x or y separated by |


Regular Expression meta characters

these are the characters with the special meaning 

\. --> search single character except line terminator or newline 
\w --> Find the word character from a to z or A to Z, 0-9
\d --> Find a digit 
\D --> searches non digit characters i.e all the characters except digit 
\s --> Find a whitespace character 
\S --> Find a non whitespace character 
\b --> Finds the match at the beginning or at the end of the word 
\B -->Find a match that is not present at the beginning or at the end of the word 
\0 Find anull character
\n --> find a newline character
\f -->find a carriage return character
\t --> find the tab character
\v --> find the vertical tab character
\uxxxx --> Find the unicode character 

REGULAR EXPRESSION QUANTIFIERS 

n+ --> match any string that contains at least one n
n* --> match any string that contains zero or more occurences of n 
n? --> match zero or one occurence of n 
m{X} --> Find any match of any string that contain a sequence of m, X times 
m{X,Y} --> Find the match of any string that contain a sequence of m, X TO Y times 
m{X,}--> contains a sequence of M, atleaset X times 
m$ --> string that contains m at the end of it 
^m : Find the match of any string which contains m at the beginning of it 
?!m : which is not followed by a specific string m 


Regular Expression Object Properties 

1. Constructor : Return the function that created the RegExp Object's prototype
2. global --> specifies whether g modifier is set or not 
3. ignorecase --> specifies whether the i modifier is set or not 
4. lastindex : specify the index at which the start the next match 
5. multline : m modifier is set or not 
source : return the text of RegExp Pattern 


Object Methods :

compile() --> used to compile the regular expression
exec()--> used to test for a match in a string 
test () --> used to test a match in a string 
toString() --> return the string value of the regular Expression

// STRING METHODSB:

search()
replace()

1. search() --> uses an expression to search for a match and returns the position for a match
2. replace() --> returns a modified string where pattern is replaced


[abc]--> used to search any characters between the brackets . the character inside the bracket can be a single character or a span
of characters

[A-Z] --> used to match any character from uppercase A to Z 
[a-z] --> used to match any character from lowercase a to z 
[A-z] --> uppercase A to lowercase z 
[abc...] --> used to match any characters between the brackets 

SYNTAX :
/[abc]/

new reGexp("[abc]")

/\[abc]/global
or 
new RegExp("[abc]","g");








